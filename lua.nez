chunk = block
block = { $(stat)* $(retstat)? #Block}

stat =  ';' /
	 {$(varlist) _ '=' _ $(explist) #Varcall} /
	 functioncall /
	 label /
	 {'break' #Break}/
	 {'goto' #Goto _ $(Name) }/
	 {'do' #Do _ $(block) _ 'end' }/
	 {'while' #While _ $(exp) _ 'do' _ $(block) _ 'end' }/
	 {'repeat' #Repeat _ $(block) _ 'until' _ $(exp) }/
	 {'if' #Until _ $(exp) _ 'then' _ $(block) {$ _ 'elseif' #Elseif _ $(exp) _ 'then' _ $(block)}* {$ _ 'else' _ $(block)}? _ 'end' }/
	 {'for' #For _ $(Name) _ '=' _ $(exp) _ ',' _ $(exp) {$ _ ',' _ $(exp)}? _ 'do' _ $(block) _ 'end'}/
	 {'for' #For _ $(namelist) _ 'in' _ $(explist) _ 'do' _ $(block) _ 'end' }/
	 {'function' #Function _ $(funcname) _ $(funcbody) }/
	 {'local function' #Localfunction _ $(Name) _ $(funcbody) }/
	 {'local' #Local _ $(namelist) {$ _ '=' _ $(explist)}?}

retstat = return $(explist)? ';'?

label = {'::' $(Name) '::' #Label}

funcname =  Name {$ _ '.' _ $(Name) #Funcname}* (':' $(Name))?

varlist = var {$ _ ',' _ $(var) #Varlist}*

var =  Name / (prefixexp '[' $(exp) ']') / (prefixexp '.' $(Name))

namelist =  Name {$ _ ',' _ $(Name) #Namelist}*

explist =  exp {$ _ ',' _ $(exp) #Explist}*

/*
exp =  nil / false / true / Numeral / LiteralString / '...' / functiondef /
	 prefixexp / tableconstructor / (exp $(binop) $(exp)) / (unop $(exp))
 */
exp = ( nil / false / true / Numeral / LiteralString / '...' / functiondef /
  prefixexp / tableconstructor / { $(unop) _ $(exp) #Unop} )  {$ _ $(binop) _ $(exp) #Binop}?

//prefixexp = var / functioncall / '(' exp ')'
prefixexp = { ( $(Name) / '(' $(exp) ')' ) ( '[' $(exp) ']' / $(Name) / $(args) / ':' $(Name) $(args) )* #Prefixexp}

functioncall =  { $(prefixexp) $(args) / $(prefixexp) ':' $(Name) $(args) #Functioncall}

args =  {('(' $(explist)? ')' / $(tableconstructor) / $(LiteralString)) #Args}

functiondef = 'function' funcbody

funcbody = {'(' $(parlist) ')' $(block) 'end' #Funcbody}

parlist = namelist _ (',' '...')? / '...'

tableconstructor = {'{' $(fieldlist)? '}' #Tableconstructor}

fieldlist = { $(field) ( fieldsep $(field))*  fieldsep? #Fieldlist}

field = '[' _ exp _ ']' _ '=' _ $(exp) / Name _ '=' _ $(exp) / exp

fieldsep = ',' / ';'

binop =  {'+' #Add} / {'-' #Sub} / {'*' #Mul} / {'/' #Div} / '//' / '^' / '%' /
	{'<=' #LessThanEquals} / {'<' #LessThan} / {'>=' #GreaterThanEquals} / {'>' #GreaterThan} /
	 '&' / '~' / '/' / '>>' / '<<' / '..' /
	 {'==' #Equals} / {'!=' #NotEquals} /
	 and / or

unop = '-' / not / '#' / '~'

Name = {([0-9] / [a-z] / [A-Z] / '_')+ #Name}
Numeral = {([1-9] [0-9]* / '0') #Numeral}
LiteralString = {('"' $(Name) '"' / '\'' $(char) '\'') #LiteralString}
char = {([0-9] / [a-z] / '_') #Char}

and = {'and' #And}
or = {'or' #Or}
not = {'not' #Not}
nil = {'nil' #Nil}
false = {'false' #False}
true = {'true' #True}
return = {'return' #Return}

S = [ \t\n\r]
_ = S*
