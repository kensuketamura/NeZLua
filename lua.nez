chunk = { ( _ ($(stat) / ';') )* $(retstat)? #Source}
block = { ( _ ($(stat) / ';') )* $(retstat)? #Block}

stat =
	 { $left(varlist) _ '=' _ $right(explist) #Assign} /
	  functioncall /
	 label /
	 {'break' #Break}/
	 {'goto' #Goto indent $(Name) }/
	 {'do' #Do indent $(block) indent 'end' }/
	 {'while' #While indent $(exp) indent 'do' indent $(block) indent 'end' }/
	 {'repeat' #Repeat indent $(block) indent 'until' indent $(exp) }/
	 if indent 'end' /
	 {'for' #For1 indent $(Name) _ '=' _ $(exp) _ ',' _ $(exp) ( _ ',' _ $(exp))? indent 'do' indent $(block) indent 'end'}/
	 {'for' #For2 indent $(namelist) indent 'in' indent $(explist) indent 'do' indent $(block) indent 'end' }/
	 {'function' #FuncDecl indent $name(funcname) _ funcbody }/
	 {'local function' #Localfunction indent $name(Name) _ funcbody }/
	 {'local' #Local indent $(namelist) {$ _ '=' _ $(explist)}?}

if = {'if' #If (indent $(exp) indent / '(' $(exp) ')' _ ) 'then' indent $(block) ( indent 'else' ( $(if) /  indent $(block)) )?}

retstat = return $(explist)? ';'?

label = {'::' $(Name) '::' #Label}

funcname =  Name {$ '.' $(Name) #Funcname}* (':' $(Name))?

funcbody = '(' $param(parlist) ')' indent $body(block) indent 'end'

varlist = var {$left _ ',' _ $right(var) #Varlist}*

var =  Name / (prefixexp '[' $(exp) ']') / (prefixexp '.' $(Name))

namelist = { $(param)  _ (',' _ $(param))* #List}

param = { $name(Name) #Param}

explist =  exp {$left _ ',' _ $right(exp) #Explist}*

exp = exp1 {$left ( _ 'or' #Or _ $right(exp1)) }*
exp1 = exp2 {$left ( _ 'and' #And _ $right(exp2)) }*
exp2 = exp3 {$left ( _ ('==' #Equals / '!=' #NotEquals) _ $right(exp3)) }*
exp3 = exp4 {$left ( _ ('<=' #LessThanEquals / '<' #LessThan / '>=' #GreaterThanEquals / '>' #GreaterThan) _ $right(exp4)) }*
exp4 = exp5 {$left ( _ '|' #Bit_Or _ $right(exp5)) }*
exp5 = exp6 {$left ( _ '~' #Bit_Exor _ $right(exp6)) }*
exp6 = exp7 {$left ( _ '&' #Bit_And _ $right(exp7)) }*
exp7 = exp8 {$left ( _ ('<<' #Left_shift / '>>' #Right_shift) _ $right(exp8)) }*
exp8 = exp9 {$left ( _ '..' #Consolidated _ $right(exp9)) }*
exp9 = exp10 {$left ( _ ('+' #Add / '-' #Sub) _ $right(exp10)) }*
exp10 = exp11 {$left ( _ ('*' #Mul / '/' #Div) _ $right(exp11)) }*
exp11 = exp12 {$left ( _ ('//' #Div_Int / '%' #Mod) _ $right(exp12)) }*
exp12 = exps {$left ( _ '^' #Power _ $right(exps)) }*
exps =  nil / false / true / Numeral / LiteralString / '...' / functiondef /functioncall/
  prefixexp / '{' fieldlist '}' / { $(unop) _ $(exp) #Unop}

prefixexp =  ( (Name) / '(' (exp) ')' ) ( '[' $(exp) ']' / '.' $(Name) / $(args) / ':' $(Name) $(args) )*

functioncall =  { $name(funcname) $param(args) #Apply}

args =  {('(' $(explist)? ')' / '{' $(fieldlist) '}' / $(LiteralString)) #List}

functiondef = 'function' '(' (parlist) ')' indent $body(block) indent 'end'

parlist = namelist _ (',' '...')? / '...'

fieldlist = { _ $(field) ( _ fieldsep _ $(field) _ )* ( _ fieldsep)? #Set}

field = {('[' _ $left(exp) _ ']' _ '=' _ $right(exp) / $left(Name) _ '=' _ $right(exp) )#Assign} / exp

fieldsep = ',' / ';'

unop = {'-' #Minus} / not / {'#' #Length} / {'~' #Bit_Not}

Name = {([0-9] / [a-z] / [A-Z] / '_')+ #Name}
Numeral = Double / Integer
Integer = {([1-9] [0-9]* / '0') #Integer}
Double = {([1-9] [0-9]* / '0') '.' [0-9]+  #Double}
LiteralString = {('"' $(Name) '"' / '\'' $(char) '\'') #LiteralString}
char = {([0-9] / [a-z] / '_') #Char}

not = {'not' #Not}
nil = {'nil' #Nil}
false = {'false' #False}
true = {'true' #True}
return = {'return' #Return}

S = [ \t\n\r]
_ = S*
indent = S+
